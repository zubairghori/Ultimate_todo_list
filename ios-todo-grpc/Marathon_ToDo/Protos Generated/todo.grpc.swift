//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: todo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Todo_ToDotasksAllCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Todo_SingleResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Todo_SingleResponse?>) -> Void) throws
}

internal extension Todo_ToDotasksAllCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Todo_SingleResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Todo_ToDotasksAllCallBase: ClientCallServerStreamingBase<Todo_AllRequest, Todo_SingleResponse>, Todo_ToDotasksAllCall {
  override class var method: String { return "/todo.ToDo/tasksAll" }
}

internal protocol Todo_ToDotaskSingleCall: ClientCallUnary {}

fileprivate final class Todo_ToDotaskSingleCallBase: ClientCallUnaryBase<Todo_SingleRequest, Todo_SingleResponse>, Todo_ToDotaskSingleCall {
  override class var method: String { return "/todo.ToDo/taskSingle" }
}

internal protocol Todo_ToDotaskCreateCall: ClientCallUnary {}

fileprivate final class Todo_ToDotaskCreateCallBase: ClientCallUnaryBase<Todo_CreateRequest, Todo_SingleResponse>, Todo_ToDotaskCreateCall {
  override class var method: String { return "/todo.ToDo/taskCreate" }
}

internal protocol Todo_ToDotaskUpdateCall: ClientCallUnary {}

fileprivate final class Todo_ToDotaskUpdateCallBase: ClientCallUnaryBase<Todo_UpdateRequest, Todo_SingleResponse>, Todo_ToDotaskUpdateCall {
  override class var method: String { return "/todo.ToDo/taskUpdate" }
}

internal protocol Todo_ToDotaskDeleteCall: ClientCallUnary {}

fileprivate final class Todo_ToDotaskDeleteCallBase: ClientCallUnaryBase<Todo_SingleRequest, Todo_DeleteResponse>, Todo_ToDotaskDeleteCall {
  override class var method: String { return "/todo.ToDo/taskDelete" }
}


/// Instantiate Todo_ToDoServiceClient, then call methods of this protocol to make API calls.
internal protocol Todo_ToDoService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func tasksAll(_ request: Todo_AllRequest, completion: ((CallResult) -> Void)?) throws -> Todo_ToDotasksAllCall

  /// Synchronous. Unary.
  func taskSingle(_ request: Todo_SingleRequest) throws -> Todo_SingleResponse
  /// Asynchronous. Unary.
  func taskSingle(_ request: Todo_SingleRequest, completion: @escaping (Todo_SingleResponse?, CallResult) -> Void) throws -> Todo_ToDotaskSingleCall

  /// Synchronous. Unary.
  func taskCreate(_ request: Todo_CreateRequest) throws -> Todo_SingleResponse
  /// Asynchronous. Unary.
  func taskCreate(_ request: Todo_CreateRequest, completion: @escaping (Todo_SingleResponse?, CallResult) -> Void) throws -> Todo_ToDotaskCreateCall

  /// Synchronous. Unary.
  func taskUpdate(_ request: Todo_UpdateRequest) throws -> Todo_SingleResponse
  /// Asynchronous. Unary.
  func taskUpdate(_ request: Todo_UpdateRequest, completion: @escaping (Todo_SingleResponse?, CallResult) -> Void) throws -> Todo_ToDotaskUpdateCall

  /// Synchronous. Unary.
  func taskDelete(_ request: Todo_SingleRequest) throws -> Todo_DeleteResponse
  /// Asynchronous. Unary.
  func taskDelete(_ request: Todo_SingleRequest, completion: @escaping (Todo_DeleteResponse?, CallResult) -> Void) throws -> Todo_ToDotaskDeleteCall

}

internal final class Todo_ToDoServiceClient: ServiceClientBase, Todo_ToDoService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func tasksAll(_ request: Todo_AllRequest, completion: ((CallResult) -> Void)?) throws -> Todo_ToDotasksAllCall {
    return try Todo_ToDotasksAllCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func taskSingle(_ request: Todo_SingleRequest) throws -> Todo_SingleResponse {
    return try Todo_ToDotaskSingleCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func taskSingle(_ request: Todo_SingleRequest, completion: @escaping (Todo_SingleResponse?, CallResult) -> Void) throws -> Todo_ToDotaskSingleCall {
    return try Todo_ToDotaskSingleCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func taskCreate(_ request: Todo_CreateRequest) throws -> Todo_SingleResponse {
    return try Todo_ToDotaskCreateCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func taskCreate(_ request: Todo_CreateRequest, completion: @escaping (Todo_SingleResponse?, CallResult) -> Void) throws -> Todo_ToDotaskCreateCall {
    return try Todo_ToDotaskCreateCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func taskUpdate(_ request: Todo_UpdateRequest) throws -> Todo_SingleResponse {
    return try Todo_ToDotaskUpdateCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func taskUpdate(_ request: Todo_UpdateRequest, completion: @escaping (Todo_SingleResponse?, CallResult) -> Void) throws -> Todo_ToDotaskUpdateCall {
    return try Todo_ToDotaskUpdateCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func taskDelete(_ request: Todo_SingleRequest) throws -> Todo_DeleteResponse {
    return try Todo_ToDotaskDeleteCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func taskDelete(_ request: Todo_SingleRequest, completion: @escaping (Todo_DeleteResponse?, CallResult) -> Void) throws -> Todo_ToDotaskDeleteCall {
    return try Todo_ToDotaskDeleteCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Todo_ToDoProvider: ServiceProvider {
  func tasksAll(request: Todo_AllRequest, session: Todo_ToDotasksAllSession) throws -> ServerStatus?
  func taskSingle(request: Todo_SingleRequest, session: Todo_ToDotaskSingleSession) throws -> Todo_SingleResponse
  func taskCreate(request: Todo_CreateRequest, session: Todo_ToDotaskCreateSession) throws -> Todo_SingleResponse
  func taskUpdate(request: Todo_UpdateRequest, session: Todo_ToDotaskUpdateSession) throws -> Todo_SingleResponse
  func taskDelete(request: Todo_SingleRequest, session: Todo_ToDotaskDeleteSession) throws -> Todo_DeleteResponse
}

extension Todo_ToDoProvider {
  internal var serviceName: String { return "todo.ToDo" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/todo.ToDo/tasksAll":
      return try Todo_ToDotasksAllSessionBase(
        handler: handler,
        providerBlock: { try self.tasksAll(request: $0, session: $1 as! Todo_ToDotasksAllSessionBase) })
          .run()
    case "/todo.ToDo/taskSingle":
      return try Todo_ToDotaskSingleSessionBase(
        handler: handler,
        providerBlock: { try self.taskSingle(request: $0, session: $1 as! Todo_ToDotaskSingleSessionBase) })
          .run()
    case "/todo.ToDo/taskCreate":
      return try Todo_ToDotaskCreateSessionBase(
        handler: handler,
        providerBlock: { try self.taskCreate(request: $0, session: $1 as! Todo_ToDotaskCreateSessionBase) })
          .run()
    case "/todo.ToDo/taskUpdate":
      return try Todo_ToDotaskUpdateSessionBase(
        handler: handler,
        providerBlock: { try self.taskUpdate(request: $0, session: $1 as! Todo_ToDotaskUpdateSessionBase) })
          .run()
    case "/todo.ToDo/taskDelete":
      return try Todo_ToDotaskDeleteSessionBase(
        handler: handler,
        providerBlock: { try self.taskDelete(request: $0, session: $1 as! Todo_ToDotaskDeleteSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Todo_ToDotasksAllSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Todo_SingleResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Todo_SingleResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Todo_ToDotasksAllSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Todo_SingleResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Todo_ToDotasksAllSessionBase: ServerSessionServerStreamingBase<Todo_AllRequest, Todo_SingleResponse>, Todo_ToDotasksAllSession {}

internal protocol Todo_ToDotaskSingleSession: ServerSessionUnary {}

fileprivate final class Todo_ToDotaskSingleSessionBase: ServerSessionUnaryBase<Todo_SingleRequest, Todo_SingleResponse>, Todo_ToDotaskSingleSession {}

internal protocol Todo_ToDotaskCreateSession: ServerSessionUnary {}

fileprivate final class Todo_ToDotaskCreateSessionBase: ServerSessionUnaryBase<Todo_CreateRequest, Todo_SingleResponse>, Todo_ToDotaskCreateSession {}

internal protocol Todo_ToDotaskUpdateSession: ServerSessionUnary {}

fileprivate final class Todo_ToDotaskUpdateSessionBase: ServerSessionUnaryBase<Todo_UpdateRequest, Todo_SingleResponse>, Todo_ToDotaskUpdateSession {}

internal protocol Todo_ToDotaskDeleteSession: ServerSessionUnary {}

fileprivate final class Todo_ToDotaskDeleteSessionBase: ServerSessionUnaryBase<Todo_SingleRequest, Todo_DeleteResponse>, Todo_ToDotaskDeleteSession {}

