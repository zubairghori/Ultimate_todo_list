//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: todo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol TodoCRUD_ToDoCRUDtasksCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> TodoCRUD_SingleResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<TodoCRUD_SingleResponse?>) -> Void) throws
}

internal extension TodoCRUD_ToDoCRUDtasksCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> TodoCRUD_SingleResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class TodoCRUD_ToDoCRUDtasksCallBase: ClientCallServerStreamingBase<TodoCRUD_AllRequest, TodoCRUD_SingleResponse>, TodoCRUD_ToDoCRUDtasksCall {
  override class var method: String { return "/todoCRUD.ToDoCRUD/tasks" }
}

internal protocol TodoCRUD_ToDoCRUDtaskSingleCall: ClientCallUnary {}

fileprivate final class TodoCRUD_ToDoCRUDtaskSingleCallBase: ClientCallUnaryBase<TodoCRUD_SingleRequest, TodoCRUD_SingleResponse>, TodoCRUD_ToDoCRUDtaskSingleCall {
  override class var method: String { return "/todoCRUD.ToDoCRUD/taskSingle" }
}

internal protocol TodoCRUD_ToDoCRUDtaskCreateCall: ClientCallUnary {}

fileprivate final class TodoCRUD_ToDoCRUDtaskCreateCallBase: ClientCallUnaryBase<TodoCRUD_CreateRequest, TodoCRUD_SingleResponse>, TodoCRUD_ToDoCRUDtaskCreateCall {
  override class var method: String { return "/todoCRUD.ToDoCRUD/taskCreate" }
}

internal protocol TodoCRUD_ToDoCRUDtaskUpdateCall: ClientCallUnary {}

fileprivate final class TodoCRUD_ToDoCRUDtaskUpdateCallBase: ClientCallUnaryBase<TodoCRUD_UpdateRequest, TodoCRUD_SingleResponse>, TodoCRUD_ToDoCRUDtaskUpdateCall {
  override class var method: String { return "/todoCRUD.ToDoCRUD/taskUpdate" }
}

internal protocol TodoCRUD_ToDoCRUDtaskDeleteCall: ClientCallUnary {}

fileprivate final class TodoCRUD_ToDoCRUDtaskDeleteCallBase: ClientCallUnaryBase<TodoCRUD_SingleRequest, TodoCRUD_DeleteResponse>, TodoCRUD_ToDoCRUDtaskDeleteCall {
  override class var method: String { return "/todoCRUD.ToDoCRUD/taskDelete" }
}


/// Instantiate TodoCRUD_ToDoCRUDServiceClient, then call methods of this protocol to make API calls.
internal protocol TodoCRUD_ToDoCRUDService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func tasks(_ request: TodoCRUD_AllRequest, completion: ((CallResult) -> Void)?) throws -> TodoCRUD_ToDoCRUDtasksCall

  /// Synchronous. Unary.
  func taskSingle(_ request: TodoCRUD_SingleRequest) throws -> TodoCRUD_SingleResponse
  /// Asynchronous. Unary.
  func taskSingle(_ request: TodoCRUD_SingleRequest, completion: @escaping (TodoCRUD_SingleResponse?, CallResult) -> Void) throws -> TodoCRUD_ToDoCRUDtaskSingleCall

  /// Synchronous. Unary.
  func taskCreate(_ request: TodoCRUD_CreateRequest) throws -> TodoCRUD_SingleResponse
  /// Asynchronous. Unary.
  func taskCreate(_ request: TodoCRUD_CreateRequest, completion: @escaping (TodoCRUD_SingleResponse?, CallResult) -> Void) throws -> TodoCRUD_ToDoCRUDtaskCreateCall

  /// Synchronous. Unary.
  func taskUpdate(_ request: TodoCRUD_UpdateRequest) throws -> TodoCRUD_SingleResponse
  /// Asynchronous. Unary.
  func taskUpdate(_ request: TodoCRUD_UpdateRequest, completion: @escaping (TodoCRUD_SingleResponse?, CallResult) -> Void) throws -> TodoCRUD_ToDoCRUDtaskUpdateCall

  /// Synchronous. Unary.
  func taskDelete(_ request: TodoCRUD_SingleRequest) throws -> TodoCRUD_DeleteResponse
  /// Asynchronous. Unary.
  func taskDelete(_ request: TodoCRUD_SingleRequest, completion: @escaping (TodoCRUD_DeleteResponse?, CallResult) -> Void) throws -> TodoCRUD_ToDoCRUDtaskDeleteCall

}

internal final class TodoCRUD_ToDoCRUDServiceClient: ServiceClientBase, TodoCRUD_ToDoCRUDService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func tasks(_ request: TodoCRUD_AllRequest, completion: ((CallResult) -> Void)?) throws -> TodoCRUD_ToDoCRUDtasksCall {
    return try TodoCRUD_ToDoCRUDtasksCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func taskSingle(_ request: TodoCRUD_SingleRequest) throws -> TodoCRUD_SingleResponse {
    return try TodoCRUD_ToDoCRUDtaskSingleCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func taskSingle(_ request: TodoCRUD_SingleRequest, completion: @escaping (TodoCRUD_SingleResponse?, CallResult) -> Void) throws -> TodoCRUD_ToDoCRUDtaskSingleCall {
    return try TodoCRUD_ToDoCRUDtaskSingleCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func taskCreate(_ request: TodoCRUD_CreateRequest) throws -> TodoCRUD_SingleResponse {
    return try TodoCRUD_ToDoCRUDtaskCreateCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func taskCreate(_ request: TodoCRUD_CreateRequest, completion: @escaping (TodoCRUD_SingleResponse?, CallResult) -> Void) throws -> TodoCRUD_ToDoCRUDtaskCreateCall {
    return try TodoCRUD_ToDoCRUDtaskCreateCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func taskUpdate(_ request: TodoCRUD_UpdateRequest) throws -> TodoCRUD_SingleResponse {
    return try TodoCRUD_ToDoCRUDtaskUpdateCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func taskUpdate(_ request: TodoCRUD_UpdateRequest, completion: @escaping (TodoCRUD_SingleResponse?, CallResult) -> Void) throws -> TodoCRUD_ToDoCRUDtaskUpdateCall {
    return try TodoCRUD_ToDoCRUDtaskUpdateCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func taskDelete(_ request: TodoCRUD_SingleRequest) throws -> TodoCRUD_DeleteResponse {
    return try TodoCRUD_ToDoCRUDtaskDeleteCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func taskDelete(_ request: TodoCRUD_SingleRequest, completion: @escaping (TodoCRUD_DeleteResponse?, CallResult) -> Void) throws -> TodoCRUD_ToDoCRUDtaskDeleteCall {
    return try TodoCRUD_ToDoCRUDtaskDeleteCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol TodoCRUD_ToDoCRUDProvider: ServiceProvider {
  func tasks(request: TodoCRUD_AllRequest, session: TodoCRUD_ToDoCRUDtasksSession) throws -> ServerStatus?
  func taskSingle(request: TodoCRUD_SingleRequest, session: TodoCRUD_ToDoCRUDtaskSingleSession) throws -> TodoCRUD_SingleResponse
  func taskCreate(request: TodoCRUD_CreateRequest, session: TodoCRUD_ToDoCRUDtaskCreateSession) throws -> TodoCRUD_SingleResponse
  func taskUpdate(request: TodoCRUD_UpdateRequest, session: TodoCRUD_ToDoCRUDtaskUpdateSession) throws -> TodoCRUD_SingleResponse
  func taskDelete(request: TodoCRUD_SingleRequest, session: TodoCRUD_ToDoCRUDtaskDeleteSession) throws -> TodoCRUD_DeleteResponse
}

extension TodoCRUD_ToDoCRUDProvider {
  internal var serviceName: String { return "todoCRUD.ToDoCRUD" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/todoCRUD.ToDoCRUD/tasks":
      return try TodoCRUD_ToDoCRUDtasksSessionBase(
        handler: handler,
        providerBlock: { try self.tasks(request: $0, session: $1 as! TodoCRUD_ToDoCRUDtasksSessionBase) })
          .run()
    case "/todoCRUD.ToDoCRUD/taskSingle":
      return try TodoCRUD_ToDoCRUDtaskSingleSessionBase(
        handler: handler,
        providerBlock: { try self.taskSingle(request: $0, session: $1 as! TodoCRUD_ToDoCRUDtaskSingleSessionBase) })
          .run()
    case "/todoCRUD.ToDoCRUD/taskCreate":
      return try TodoCRUD_ToDoCRUDtaskCreateSessionBase(
        handler: handler,
        providerBlock: { try self.taskCreate(request: $0, session: $1 as! TodoCRUD_ToDoCRUDtaskCreateSessionBase) })
          .run()
    case "/todoCRUD.ToDoCRUD/taskUpdate":
      return try TodoCRUD_ToDoCRUDtaskUpdateSessionBase(
        handler: handler,
        providerBlock: { try self.taskUpdate(request: $0, session: $1 as! TodoCRUD_ToDoCRUDtaskUpdateSessionBase) })
          .run()
    case "/todoCRUD.ToDoCRUD/taskDelete":
      return try TodoCRUD_ToDoCRUDtaskDeleteSessionBase(
        handler: handler,
        providerBlock: { try self.taskDelete(request: $0, session: $1 as! TodoCRUD_ToDoCRUDtaskDeleteSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol TodoCRUD_ToDoCRUDtasksSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: TodoCRUD_SingleResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: TodoCRUD_SingleResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension TodoCRUD_ToDoCRUDtasksSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: TodoCRUD_SingleResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class TodoCRUD_ToDoCRUDtasksSessionBase: ServerSessionServerStreamingBase<TodoCRUD_AllRequest, TodoCRUD_SingleResponse>, TodoCRUD_ToDoCRUDtasksSession {}

internal protocol TodoCRUD_ToDoCRUDtaskSingleSession: ServerSessionUnary {}

fileprivate final class TodoCRUD_ToDoCRUDtaskSingleSessionBase: ServerSessionUnaryBase<TodoCRUD_SingleRequest, TodoCRUD_SingleResponse>, TodoCRUD_ToDoCRUDtaskSingleSession {}

internal protocol TodoCRUD_ToDoCRUDtaskCreateSession: ServerSessionUnary {}

fileprivate final class TodoCRUD_ToDoCRUDtaskCreateSessionBase: ServerSessionUnaryBase<TodoCRUD_CreateRequest, TodoCRUD_SingleResponse>, TodoCRUD_ToDoCRUDtaskCreateSession {}

internal protocol TodoCRUD_ToDoCRUDtaskUpdateSession: ServerSessionUnary {}

fileprivate final class TodoCRUD_ToDoCRUDtaskUpdateSessionBase: ServerSessionUnaryBase<TodoCRUD_UpdateRequest, TodoCRUD_SingleResponse>, TodoCRUD_ToDoCRUDtaskUpdateSession {}

internal protocol TodoCRUD_ToDoCRUDtaskDeleteSession: ServerSessionUnary {}

fileprivate final class TodoCRUD_ToDoCRUDtaskDeleteSessionBase: ServerSessionUnaryBase<TodoCRUD_SingleRequest, TodoCRUD_DeleteResponse>, TodoCRUD_ToDoCRUDtaskDeleteSession {}

